name: Build addons

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            devcmd_arch: x64
            artifact_suffix: addon64
            artifact_name: zzz_display_commander.addon64
          - arch: x86
            devcmd_arch: x86
            artifact_suffix: addon32
            artifact_name: zzz_display_commander.addon32

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Setup MSVC (${{ matrix.devcmd_arch }})
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.devcmd_arch }}

      - name: Configure
        shell: bash
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        shell: bash
        run: |
          cmake --build build --config Release --parallel

      - name: Collect artifacts
        id: collect
        shell: bash
        run: |
          mkdir -p artifacts
          # Look specifically for display_commander addon files
          display_commander_file=$(find build -type f -name "zzz_display_commander.${{ matrix.artifact_suffix }}" | head -1)
          if [ -z "$display_commander_file" ]; then
            echo "Display Commander addon file not found; listing build dir for debugging:" >&2
            find build -type f -name "*.${{ matrix.artifact_suffix }}" || true
            ls -la build || true
            exit 1
          fi
          # Copy the display_commander addon with the correct name
          cp "$display_commander_file" "artifacts/${{ matrix.artifact_name }}"
          
          # Look for driver_restart.exe in tools directory
          if [ -f "build/tools/driver_restart.exe" ]; then
            echo "Found driver_restart.exe: build/tools/driver_restart.exe"
            cp "build/tools/driver_restart.exe" "artifacts/driver_restart.exe"
          else
            echo "Warning: driver_restart.exe not found in build/tools/; listing build dir for debugging:" >&2
            find build -type f -name "*.exe" || true
          fi
          
          echo "artifact_dir=artifacts" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zzz-display-commander-${{ matrix.artifact_suffix }}
          path: ${{ steps.collect.outputs.artifact_dir }}/*
          if-no-files-found: error

  release:
    name: Release
    needs: [ build ]
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: windows-latest
    steps:
      - name: Download build artifacts (x64)
        uses: actions/download-artifact@v4
        with:
          name: zzz-display-commander-addon64
          path: artifacts

      - name: Download build artifacts (x86)
        uses: actions/download-artifact@v4
        with:
          name: zzz-display-commander-addon32
          path: artifacts

      - name: Create Tag Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update Latest Release (main)
        if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: Latest
          allowUpdates: true
          artifacts: artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}


